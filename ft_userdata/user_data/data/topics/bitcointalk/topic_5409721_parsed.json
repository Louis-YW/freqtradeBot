{
  "id": "topic_5409721",
  "title": "brainless",
  "author": "brainless",
  "created_time": "August 13, 2022, 09:46:26 AM",
  "content": "with reference of old post https://bitcointalk.org/index.php?topic=5244940.msg55421924#msg55421924if i explain your word in easy example commands for new gpu based develop application/repo, by jean luc or other developer, could be develop, or if any one know already developed can post links and refferancehere are some example aspected commands./vs-pub -c  -gpu -input in.txt -output out.txt -add 0250863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B2352 #pubkey./vs-pub -c  -gpu -input in.txt -output out.txt -mul 123456789 # its privatekey in num (not hex)./vs-pub -c  -gpu -input in.txt -output out.txt -sub 0250863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B2352 #pubkey./vs-pub -c  -gpu -input in.txt -output out.txt -sub 0250863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B2352 -r (reverse like02508... pubkey substract to all listed pubkey inside in.txt-c is compressed pubkey-u is uncompressed pubkey-input is load of compressed/uncompressed pubkeys list-output is results output to file-r is reverse of sub ( listed pubkey in command minus(-) in.txt (pubkeys)had any one worked and created ?",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5409721",
  "comments": [
    {
      "author": "NotATether",
      "created_time": "August 13, 2022, 10:05:42 AM",
      "body": "I got no NVIDIA GPUs lying around so I'm unable to make anything like this. It's kind of annoying that this is a basic limitation because it prevents anybody from working on these things in the first place.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "fxsniper",
      "created_time": "August 15, 2022, 09:56:26 AM",
      "body": "I think the next calculation maybe need CUDA GPU to calculate with massive number calculate (maybe style like brute force calculate)maybe you can find cheap coder CUDA on Fiverranother way fast calculate without GPU is to try using python with multiprocess (multi-core CPU) to replaceof course, it is still slower than using CUDA GPU to calculateAMD Ryzen Threadripper 3990X 64-Core, 128-Thread cost over $7000 still expensive same cust of hi-end 2GPU)programmer CUDA will be coded if they interesting in that idea",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "August 16, 2022, 07:14:55 AM",
      "body": "Quote from: fxsniper on August 15, 2022, 09:56:26 AMI think the next calculation maybe need CUDA GPU to calculate with massive number calculate (maybe style like brute force calculate)maybe you can find cheap coder CUDA on Fiverranother way fast calculate without GPU is to try using python with multiprocess (multi-core CPU) to replaceof course, it is still slower than using CUDA GPU to calculateAMD Ryzen Threadripper 3990X 64-Core, 128-Thread cost over $7000 still expensive same cust of hi-end 2GPU)programmer CUDA will be coded if they interesting in that ideapython scripts, peoples have from more then 8 years, its always seems slow against c++ and more cuda, maybe peoples dont have time or logic to play trillions keys calc, max they need to calc (not to play) few hundrds or thousandsbut as i need to calc key for 125 and 130 puzzle, i need little bit more fast calc, only cuda could help on this stage",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "NotATether",
      "created_time": "August 16, 2022, 04:03:57 PM",
      "body": "Quote from: brainless on August 16, 2022, 07:14:55 AMpython scripts, peoples have from more then 8 years, its always seems slow against c++ and more cuda, maybe peoples dont have time or logic to play trillions keys calc, max they need to calc (not to play) few hundrds or thousandsbut as i need to calc key for 125 and 130 puzzle, i need little bit more fast calc, only cuda could help on this stageOptimize whatever CUDA code you find, but in the long run, you gotta either run a distributed CUDA cracker, or write one for FPGAs. Think of it like 2013 mining difficulty becoming too high for GPUs.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "August 16, 2022, 05:47:27 PM",
      "body": "Quote from: NotATether on August 16, 2022, 04:03:57 PMQuote from: brainless on August 16, 2022, 07:14:55 AMpython scripts, peoples have from more then 8 years, its always seems slow against c++ and more cuda, maybe peoples dont have time or logic to play trillions keys calc, max they need to calc (not to play) few hundrds or thousandsbut as i need to calc key for 125 and 130 puzzle, i need little bit more fast calc, only cuda could help on this stageOptimize whatever CUDA code you find, but in the long run, you gotta either run a distributed CUDA cracker, or write one for FPGAs. Think of it like 2013 mining difficulty becoming too high for GPUs.no need distributed CUDA cracker,simple python do is by lib fastecdsa or ecdsawhere you do pubkey + pubkey, pubkey - pubkey, pubkey * 123 int value etcsame no advancement, no hard programming, rgis logic to cuda processcpu process like 200k/s etc and cuda run millions/s or 2g/s, depand on cuda devicehope cuda developer understand about this simple method on ecdsa workout",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "fxsniper",
      "created_time": "August 20, 2022, 04:43:18 AM",
      "body": "don't wait for someone to code CUDA GPUtry testhttps://github.com/iceland2k14/secp256k1still use CPU but better than simple pythonbut the result get is pubkey baseI know CUDA GPU fast than 1000x timehow fast between compare speedpython ecdsa+gmpy2   (pip install ecdsa[gmpy2])python + fastecdsa  (can use only on Linux or WSL2, can not use in windows)python + iceland2k14/secp256k1   (dll on windows)have other options available for fast  point addition , multiplication on CPU",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 11, 2022, 02:48:51 PM",
      "body": "Quote from: fxsniper on August 20, 2022, 04:43:18 AMdon't wait for someone to code CUDA GPUtry testhttps://github.com/iceland2k14/secp256k1still use CPU but better than simple pythonbut the result get is pubkey baseI know CUDA GPU fast than 1000x timehow fast between compare speedpython ecdsa+gmpy2   (pip install ecdsa[gmpy2])python + fastecdsa  (can use only on Linux or WSL2, can not use in windows)python + iceland2k14/secp256k1   (dll on windows)have other options available for fast  point addition , multiplication on CPUtried but not fruitful , most similar to fastecdsa speed, only gpu based speed will increase, and all gpu developers are just copy paste each other source code for just increament from privatekeys to addresses/hash160, maybe they dont have time to build as per different calc based, above is very simple basic of point add/sub/mul by intg or pubkey(point), let see which one developer jump with creative mind",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "alexeyneu",
      "created_time": "September 13, 2022, 06:48:07 AM",
      "body": "if you see secp256k1 (c++) lib - something going on. not sure if they're using sse at least but i see some  progress",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 13, 2022, 07:20:26 AM",
      "body": "Quote from: alexeyneu on September 13, 2022, 06:48:07 AMif you see secp256k1 (c++) lib - something going on. not sure if they're using sse at least but i see some  progressyessecp256k1 (c++) libandpure c script/tools for basic point addition/mul/subother saying we write c code for python, but only could run over python, mean slow speeds, actually engine loaded on donkey and saying enging speed, they need load donkey over engine, then say engine speed pure c  speed 100x over pythonand then c to cuda, speed 10000x over python/clet see who catch idea'a",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "alexeyneu",
      "created_time": "September 13, 2022, 08:46:26 AM",
      "body": "yeah it's C lib. c++ one is just a port (badly made)",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 19, 2022, 10:08:54 AM",
      "body": "Quote from: alexeyneu on September 13, 2022, 08:46:26 AMyeah it's C lib. c++ one is just a port (badly made)any one have script for c++ or cuda for said format in this githubhttps://github.com/phrutis/Rotor-Cuda/issues/44",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "COBRAS",
      "created_time": "September 23, 2022, 02:09:46 AM",
      "body": "Quote from: brainless on September 19, 2022, 10:08:54 AMQuote from: alexeyneu on September 13, 2022, 08:46:26 AMyeah it's C lib. c++ one is just a port (badly made)any one have script for c++ or cuda for said format in this githubhttps://github.com/phrutis/Rotor-Cuda/issues/44doub,mul, sub CUDA https://github.com/XopMC/CudaBrainSecp",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 23, 2022, 10:56:44 AM",
      "body": "Quote from: COBRAS on September 23, 2022, 02:09:46 AMQuote from: brainless on September 19, 2022, 10:08:54 AMQuote from: alexeyneu on September 13, 2022, 08:46:26 AMyeah it's C lib. c++ one is just a port (badly made)any one have script for c++ or cuda for said format in this githubhttps://github.com/phrutis/Rotor-Cuda/issues/44doub,mul, sub CUDA https://github.com/XopMC/CudaBrainSecpsame secp256k1 wtien in vanitygen, kanagroo scripts, bitcrack, other tools in c by iceland...but create like commands base working as above mention examples commands, no wheresame i upload simple compare 2 files in add/sub pubkeys point, i upload python script and e sample files A B, check process time for 50k pubkeysmaybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compare",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 27, 2022, 10:17:01 AM",
      "body": "Quote from: brainless on September 23, 2022, 10:56:44 AMQuote from: COBRAS on September 23, 2022, 02:09:46 AMQuote from: brainless on September 19, 2022, 10:08:54 AMQuote from: alexeyneu on September 13, 2022, 08:46:26 AMyeah it's C lib. c++ one is just a port (badly made)any one have script for c++ or cuda for said format in this githubhttps://github.com/phrutis/Rotor-Cuda/issues/44doub,mul, sub CUDA https://github.com/XopMC/CudaBrainSecpsame secp256k1 wtien in vanitygen, kanagroo scripts, bitcrack, other tools in c by iceland...but create like commands base working as above mention examples commands, no wheresame i upload simple compare 2 files in add/sub pubkeys point, i upload python script and e sample files A B, check process time for 50k pubkeysmaybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-comparedid someone had make test to process 50k pubkeys, and could write their time to finish python process",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "wedom",
      "created_time": "September 27, 2022, 06:00:40 PM",
      "body": "Quote from: brainless on September 23, 2022, 10:56:44 AM...maybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compareI tested this python compare script. I only added the time output. Here are the results: Code:start = 2022-09-27 16:58:32.7840931000 2022-09-27 17:01:12.1651732000 2022-09-27 17:03:50.8491763000 2022-09-27 17:06:31.3877204000 2022-09-27 17:09:12.7350625000 2022-09-27 17:11:53.8932096000 2022-09-27 17:14:32.9768177000 2022-09-27 17:17:07.5461958000 2022-09-27 17:19:46.7520699000 2022-09-27 17:22:27.57818010000 2022-09-27 17:25:03.30578811000 2022-09-27 17:27:38.67197512000 2022-09-27 17:30:17.01977713000 2022-09-27 17:32:57.49592514000 2022-09-27 17:35:35.70504515000 2022-09-27 17:38:13.91468516000 2022-09-27 17:40:52.50035517000 2022-09-27 17:43:34.29375318000 2022-09-27 17:46:18.73402119000 2022-09-27 17:48:56.16559220000 2022-09-27 17:51:35.21256421000 2022-09-27 17:54:26.73835822000 2022-09-27 17:57:09.51413923000 2022-09-27 17:59:47.92946324000 2022-09-27 18:02:22.69723425000 2022-09-27 18:05:00.12864626000 2022-09-27 18:07:41.78467227000 2022-09-27 18:10:22.88387628000 2022-09-27 18:13:03.26251229000 2022-09-27 18:15:41.92534530000 2022-09-27 18:18:21.31314731000 2022-09-27 18:21:06.74421632000 2022-09-27 18:23:49.50267033000 2022-09-27 18:26:32.71086634000 2022-09-27 18:29:16.49663635000 2022-09-27 18:32:00.07471136000 2022-09-27 18:34:43.90788737000 2022-09-27 18:37:28.13758238000 2022-09-27 18:40:07.64131039000 2022-09-27 18:42:52.39788440000 2022-09-27 18:45:52.93581241000 2022-09-27 18:48:32.09914642000 2022-09-27 18:51:11.31553443000 2022-09-27 18:53:49.43340344000 2022-09-27 18:56:31.33841645000 2022-09-27 18:59:13.23055546000 2022-09-27 19:01:54.81996547000 2022-09-27 19:04:34.46957748000 2022-09-27 19:07:12.55322049000 2022-09-27 19:09:56.293709end = 2022-09-27 19:10:23.538917",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 28, 2022, 05:26:54 AM",
      "body": "Quote from: wedom on September 27, 2022, 06:00:40 PMQuote from: brainless on September 23, 2022, 10:56:44 AM...maybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compareI tested this python compare script. I only added the time output. Here are the results: Code:start = 2022-09-27 16:58:32.7840931000 2022-09-27 17:01:12.1651732000 2022-09-27 17:03:50.8491763000 2022-09-27 17:06:31.3877204000 2022-09-27 17:09:12.7350625000 2022-09-27 17:11:53.8932096000 2022-09-27 17:14:32.9768177000 2022-09-27 17:17:07.5461958000 2022-09-27 17:19:46.7520699000 2022-09-27 17:22:27.57818010000 2022-09-27 17:25:03.30578811000 2022-09-27 17:27:38.67197512000 2022-09-27 17:30:17.01977713000 2022-09-27 17:32:57.49592514000 2022-09-27 17:35:35.70504515000 2022-09-27 17:38:13.91468516000 2022-09-27 17:40:52.50035517000 2022-09-27 17:43:34.29375318000 2022-09-27 17:46:18.73402119000 2022-09-27 17:48:56.16559220000 2022-09-27 17:51:35.21256421000 2022-09-27 17:54:26.73835822000 2022-09-27 17:57:09.51413923000 2022-09-27 17:59:47.92946324000 2022-09-27 18:02:22.69723425000 2022-09-27 18:05:00.12864626000 2022-09-27 18:07:41.78467227000 2022-09-27 18:10:22.88387628000 2022-09-27 18:13:03.26251229000 2022-09-27 18:15:41.92534530000 2022-09-27 18:18:21.31314731000 2022-09-27 18:21:06.74421632000 2022-09-27 18:23:49.50267033000 2022-09-27 18:26:32.71086634000 2022-09-27 18:29:16.49663635000 2022-09-27 18:32:00.07471136000 2022-09-27 18:34:43.90788737000 2022-09-27 18:37:28.13758238000 2022-09-27 18:40:07.64131039000 2022-09-27 18:42:52.39788440000 2022-09-27 18:45:52.93581241000 2022-09-27 18:48:32.09914642000 2022-09-27 18:51:11.31553443000 2022-09-27 18:53:49.43340344000 2022-09-27 18:56:31.33841645000 2022-09-27 18:59:13.23055546000 2022-09-27 19:01:54.81996547000 2022-09-27 19:04:34.46957748000 2022-09-27 19:07:12.55322049000 2022-09-27 19:09:56.293709end = 2022-09-27 19:10:23.538917aprox 2 hours 15 minutes for 50k pubkey comparison , script generate addition in 200 pubkeys, total 10 million keys generate from 50k pubkeys, to verifyremember its simple addition, but for each key from 50k pubkeys, here problem is python, uses 1 by 1 thread, if this same tool in cuda would be done in 2 secondsor maybe tool in c maybe do it less then 10 minutesany c or cuda developer can help us to write such tools, for further researchthankx",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "CrunchyF",
      "created_time": "September 28, 2022, 02:53:52 PMLast edit: September 28, 2022, 03:25:48 PM by CrunchyF",
      "body": "Quote from: brainless on September 28, 2022, 05:26:54 AMQuote from: wedom on September 27, 2022, 06:00:40 PMQuote from: brainless on September 23, 2022, 10:56:44 AM...maybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compareI tested this python compare script. I only added the time output. Here are the results: Code:start = 2022-09-27 16:58:32.7840931000 2022-09-27 17:01:12.1651732000 2022-09-27 17:03:50.8491763000 2022-09-27 17:06:31.3877204000 2022-09-27 17:09:12.7350625000 2022-09-27 17:11:53.8932096000 2022-09-27 17:14:32.9768177000 2022-09-27 17:17:07.5461958000 2022-09-27 17:19:46.7520699000 2022-09-27 17:22:27.57818010000 2022-09-27 17:25:03.30578811000 2022-09-27 17:27:38.67197512000 2022-09-27 17:30:17.01977713000 2022-09-27 17:32:57.49592514000 2022-09-27 17:35:35.70504515000 2022-09-27 17:38:13.91468516000 2022-09-27 17:40:52.50035517000 2022-09-27 17:43:34.29375318000 2022-09-27 17:46:18.73402119000 2022-09-27 17:48:56.16559220000 2022-09-27 17:51:35.21256421000 2022-09-27 17:54:26.73835822000 2022-09-27 17:57:09.51413923000 2022-09-27 17:59:47.92946324000 2022-09-27 18:02:22.69723425000 2022-09-27 18:05:00.12864626000 2022-09-27 18:07:41.78467227000 2022-09-27 18:10:22.88387628000 2022-09-27 18:13:03.26251229000 2022-09-27 18:15:41.92534530000 2022-09-27 18:18:21.31314731000 2022-09-27 18:21:06.74421632000 2022-09-27 18:23:49.50267033000 2022-09-27 18:26:32.71086634000 2022-09-27 18:29:16.49663635000 2022-09-27 18:32:00.07471136000 2022-09-27 18:34:43.90788737000 2022-09-27 18:37:28.13758238000 2022-09-27 18:40:07.64131039000 2022-09-27 18:42:52.39788440000 2022-09-27 18:45:52.93581241000 2022-09-27 18:48:32.09914642000 2022-09-27 18:51:11.31553443000 2022-09-27 18:53:49.43340344000 2022-09-27 18:56:31.33841645000 2022-09-27 18:59:13.23055546000 2022-09-27 19:01:54.81996547000 2022-09-27 19:04:34.46957748000 2022-09-27 19:07:12.55322049000 2022-09-27 19:09:56.293709end = 2022-09-27 19:10:23.538917aprox 2 hours 15 minutes for 50k pubkey comparison , script generate addition in 200 pubkeys, total 10 million keys generate from 50k pubkeys, to verifyremember its simple addition, but for each key from 50k pubkeys, here problem is python, uses 1 by 1 thread, if this same tool in cuda would be done in 2 secondsor maybe tool in c maybe do it less then 10 minutesany c or cuda developer can help us to write such tools, for further researchthankxHello i wrote a custom Cuda library for point addition , multiplication etc  (adapted from Jean-Luc Pons one)...the use of pycuda (python) to launch the kernel is possible  But can you explain what the purpose of the script you want to made?Because that's right, that the speed of point addition will be around 1Gigakeys/sec on a RTX3070, only if you work with pubkey loaded in ram.The main problem of what you want to do will be the speed bottleneck of reading the input file and writing the result in the output file on the HDD (1Giga Key are more than 32GB of size on the HDD )So you can compute 1Giga Key in one sec with the GPU.but you will spend a long time to convert your keys sequentially in hexed-ASCII  and write the result (work done by the cpu) because a gpu can't write or read a file.To resumeConvert input file to chunks of block in a grid of threads-> lauch kernel on the GPU -> return and convert the result                               SLOW                                                               FAST                                    SLOW",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 28, 2022, 08:37:15 PM",
      "body": "Quote from: CrunchyF on September 28, 2022, 02:53:52 PMQuote from: brainless on September 28, 2022, 05:26:54 AMQuote from: wedom on September 27, 2022, 06:00:40 PMQuote from: brainless on September 23, 2022, 10:56:44 AM...maybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compareI tested this python compare script. I only added the time output. Here are the results: Code:start = 2022-09-27 16:58:32.7840931000 2022-09-27 17:01:12.1651732000 2022-09-27 17:03:50.8491763000 2022-09-27 17:06:31.3877204000 2022-09-27 17:09:12.7350625000 2022-09-27 17:11:53.8932096000 2022-09-27 17:14:32.9768177000 2022-09-27 17:17:07.5461958000 2022-09-27 17:19:46.7520699000 2022-09-27 17:22:27.57818010000 2022-09-27 17:25:03.30578811000 2022-09-27 17:27:38.67197512000 2022-09-27 17:30:17.01977713000 2022-09-27 17:32:57.49592514000 2022-09-27 17:35:35.70504515000 2022-09-27 17:38:13.91468516000 2022-09-27 17:40:52.50035517000 2022-09-27 17:43:34.29375318000 2022-09-27 17:46:18.73402119000 2022-09-27 17:48:56.16559220000 2022-09-27 17:51:35.21256421000 2022-09-27 17:54:26.73835822000 2022-09-27 17:57:09.51413923000 2022-09-27 17:59:47.92946324000 2022-09-27 18:02:22.69723425000 2022-09-27 18:05:00.12864626000 2022-09-27 18:07:41.78467227000 2022-09-27 18:10:22.88387628000 2022-09-27 18:13:03.26251229000 2022-09-27 18:15:41.92534530000 2022-09-27 18:18:21.31314731000 2022-09-27 18:21:06.74421632000 2022-09-27 18:23:49.50267033000 2022-09-27 18:26:32.71086634000 2022-09-27 18:29:16.49663635000 2022-09-27 18:32:00.07471136000 2022-09-27 18:34:43.90788737000 2022-09-27 18:37:28.13758238000 2022-09-27 18:40:07.64131039000 2022-09-27 18:42:52.39788440000 2022-09-27 18:45:52.93581241000 2022-09-27 18:48:32.09914642000 2022-09-27 18:51:11.31553443000 2022-09-27 18:53:49.43340344000 2022-09-27 18:56:31.33841645000 2022-09-27 18:59:13.23055546000 2022-09-27 19:01:54.81996547000 2022-09-27 19:04:34.46957748000 2022-09-27 19:07:12.55322049000 2022-09-27 19:09:56.293709end = 2022-09-27 19:10:23.538917aprox 2 hours 15 minutes for 50k pubkey comparison , script generate addition in 200 pubkeys, total 10 million keys generate from 50k pubkeys, to verifyremember its simple addition, but for each key from 50k pubkeys, here problem is python, uses 1 by 1 thread, if this same tool in cuda would be done in 2 secondsor maybe tool in c maybe do it less then 10 minutesany c or cuda developer can help us to write such tools, for further researchthankxHello i wrote a custom Cuda library for point addition , multiplication etc  (adapted from Jean-Luc Pons one)...the use of pycuda (python) to launch the kernel is possible  But can you explain what the purpose of the script you want to made?Because that's right, that the speed of point addition will be around 1Gigakeys/sec on a RTX3070, only if you work with pubkey loaded in ram.The main problem of what you want to do will be the speed bottleneck of reading the input file and writing the result in the output file on the HDD (1Giga Key are more than 32GB of size on the HDD )So you can compute 1Giga Key in one sec with the GPU.but you will spend a long time to convert your keys sequentially in hexed-ASCII  and write the result (work done by the cpu) because a gpu can't write or read a file.To resumeConvert input file to chunks of block in a grid of threads-> lauch kernel on the GPU -> return and convert the result                               SLOW                                                               FAST                                    SLOWpurpose of the script is filter duplicate (not indentical), duplicate in seriesexamplefile b have 10 pubkeys (from dec 1 to 10) and load file A in mem for compare, where have 10 pubkeys ( from dec 1000 to 1010)file b load all pubkeys as point and start addition with 1, at first found is pubkey dec 1000, print itfrom both files i will have final point is pubkey dec 1000in this process10 pubkeys start addition to reach 100010*1000 = 10000 keys processbut print will be only 10 pubkeys same as file B count of pubkeysif file B have 1m pubkeysprocess keys would be 1000m pubkeys total, but print result after compare first match would be 1m pubkeysif you can take compare.py script to pycuda, maybe its greate to work around",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "brainless",
      "created_time": "September 28, 2022, 08:38:12 PM",
      "body": "Quote from: CrunchyF on September 28, 2022, 02:53:52 PMQuote from: brainless on September 28, 2022, 05:26:54 AMQuote from: wedom on September 27, 2022, 06:00:40 PMQuote from: brainless on September 23, 2022, 10:56:44 AM...maybe you can find tweek python for better speed, but in my view, c++ or cuda, will do this process in maximum 2 secondswrite solutions here or at github issue areahttps://github.com/onetrader2022/python-secp-compareI tested this python compare script. I only added the time output. Here are the results: Code:start = 2022-09-27 16:58:32.7840931000 2022-09-27 17:01:12.1651732000 2022-09-27 17:03:50.8491763000 2022-09-27 17:06:31.3877204000 2022-09-27 17:09:12.7350625000 2022-09-27 17:11:53.8932096000 2022-09-27 17:14:32.9768177000 2022-09-27 17:17:07.5461958000 2022-09-27 17:19:46.7520699000 2022-09-27 17:22:27.57818010000 2022-09-27 17:25:03.30578811000 2022-09-27 17:27:38.67197512000 2022-09-27 17:30:17.01977713000 2022-09-27 17:32:57.49592514000 2022-09-27 17:35:35.70504515000 2022-09-27 17:38:13.91468516000 2022-09-27 17:40:52.50035517000 2022-09-27 17:43:34.29375318000 2022-09-27 17:46:18.73402119000 2022-09-27 17:48:56.16559220000 2022-09-27 17:51:35.21256421000 2022-09-27 17:54:26.73835822000 2022-09-27 17:57:09.51413923000 2022-09-27 17:59:47.92946324000 2022-09-27 18:02:22.69723425000 2022-09-27 18:05:00.12864626000 2022-09-27 18:07:41.78467227000 2022-09-27 18:10:22.88387628000 2022-09-27 18:13:03.26251229000 2022-09-27 18:15:41.92534530000 2022-09-27 18:18:21.31314731000 2022-09-27 18:21:06.74421632000 2022-09-27 18:23:49.50267033000 2022-09-27 18:26:32.71086634000 2022-09-27 18:29:16.49663635000 2022-09-27 18:32:00.07471136000 2022-09-27 18:34:43.90788737000 2022-09-27 18:37:28.13758238000 2022-09-27 18:40:07.64131039000 2022-09-27 18:42:52.39788440000 2022-09-27 18:45:52.93581241000 2022-09-27 18:48:32.09914642000 2022-09-27 18:51:11.31553443000 2022-09-27 18:53:49.43340344000 2022-09-27 18:56:31.33841645000 2022-09-27 18:59:13.23055546000 2022-09-27 19:01:54.81996547000 2022-09-27 19:04:34.46957748000 2022-09-27 19:07:12.55322049000 2022-09-27 19:09:56.293709end = 2022-09-27 19:10:23.538917aprox 2 hours 15 minutes for 50k pubkey comparison , script generate addition in 200 pubkeys, total 10 million keys generate from 50k pubkeys, to verifyremember its simple addition, but for each key from 50k pubkeys, here problem is python, uses 1 by 1 thread, if this same tool in cuda would be done in 2 secondsor maybe tool in c maybe do it less then 10 minutesany c or cuda developer can help us to write such tools, for further researchthankxHello i wrote a custom Cuda library for point addition , multiplication etc  (adapted from Jean-Luc Pons one)...the use of pycuda (python) to launch the kernel is possible  But can you explain what the purpose of the script you want to made?Because that's right, that the speed of point addition will be around 1Gigakeys/sec on a RTX3070, only if you work with pubkey loaded in ram.The main problem of what you want to do will be the speed bottleneck of reading the input file and writing the result in the output file on the HDD (1Giga Key are more than 32GB of size on the HDD )So you can compute 1Giga Key in one sec with the GPU.but you will spend a long time to convert your keys sequentially in hexed-ASCII  and write the result (work done by the cpu) because a gpu can't write or read a file.To resumeConvert input file to chunks of block in a grid of threads-> lauch kernel on the GPU -> return and convert the result                               SLOW                                                               FAST                                    SLOWexampleFile B :039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c80370b55404702ffa86ecfa4e88e0f354004a0965a5eea5fbbd297436001ae920df031fb966918db3af46c37234b6a4b043719886d6a05859ba32f72742d6141f7ae6027dda7bb4a07894280993cb04ba269905446cfee186833dc6cb46d02979bb41470322d9e364b9274dab098bcb23e0428e8a416d54f05a781281ee221db69e1ec7b803354a9e0deb417e0a447d8b8d23dd5e98d0ae3e70186eca8cde809c4b8fa8331f03625fa450aed083fb30166766d5874131adb168c0247cbff83987297bf873e45d03102c56fc72cbe8d908c4c2dd498df4e92719187cf9c3ef4c59f111bd4ff36ede0324acb1c19b6dfc25defb01c2e2681ae82deacc0ff21ae8ff01f82f37a6a2147f028ed5001a40f95405950a8d53420e32009824c636792e16626e12e24027269fa9File A0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179802c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee502f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f902e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe403fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a0103acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7above 2 files arefile A is start dec of hex 1 to 10 (pubkeys) 10 pubkeysfile B is start dec of hex 1000 to 1010 (pubkeys) 10 pubkeysload file B in memoryload file A and start process with addition point 1 (0279be667...) till first match from File B (loaded in memory), as found match first print and break processabove example all match will be 10 pubkeys print to file039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8039d1abaec9f5715a15c7628244170951e0f85e87f68ca5393d3f9fc3fa23a69c8",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}
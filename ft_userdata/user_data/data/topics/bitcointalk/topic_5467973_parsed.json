{
  "id": "topic_5467973",
  "title": "jakej1978@gmail.com",
  "author": "jakej1978@gmail.com",
  "created_time": "September 25, 2023, 01:30:23 AM",
  "content": "I have a slightly modified fork of bitcoin-0.14. It has a name change and different key.  I was mostly able to get it updated it to bitcoin-25, but I cannot get passed this error. I am stuck!CMainParams::CMainParams(): Assertion `consensus.hashGenesisBlock == uint256S(\"0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddea\")' failed.I believe the problem is with:0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddeaandpszTimestamp = \"New York Times 8/Sep/2017 Equifax Says Cyberattack May Have Affected 143 Million Customers\";const CScript scriptPubKey = CScript() << ParseHex(\"03facfdfc22816528518884608350d828e1403dd142d2276303b5b6da7aFrom the old src/chainparams.cpp:#define GENESIS_TIME 1510225282#define GENESIS_DIFFICULTY 0x1e7fffffvoid MineGenesisBlock(CBlock &genesis);static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& scriptPubKey, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward){    CMutableTransaction txNew;    txNew.nVersion = 2;    txNew.vin.resize(1);    txNew.vout.resize(1);    unsigned int height = 0;    txNew.vin[0].scriptSig = CScript() << height << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));    txNew.vout[0].nValue = genesisReward;    txNew.vout[0].scriptPubKey = scriptPubKey;    CBlock genesis;    genesis.nTime    = nTime;    genesis.nBits    = nBits;    genesis.nNonce   = nNonce;    genesis.nVersion = nVersion;    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));    genesis.hashPrevBlock.SetNull();    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);    return genesis;}static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward){    const char* pszTimestamp = \"New York Times 8/Sep/2017 Equifax Says Cyberattack May Have Affected 143 Million Customers\";    const CScript scriptPubKey = CScript() << ParseHex(\"03facfdfc22816528518884608350d828e1403dd142d2276303b5b6da7a8b854a1\") << OP_CHECKSIG;    return CreateGenesisBlock(pszTimestamp, scriptPubKey, nTime, nNonce, nBits, nVersion, genesisReward);}class CMainParams : public CChainParams {public:    CMainParams() {        strNetworkID = \"main\";        consensus.nSubsidyHalvingInterval = 210000;        consensus.BIP34Height = 256;        consensus.BIP34Hash = uint256S(\"0000000000000000000000000000000000000000000000000000000000000000\");        consensus.BIP65Height = 0;        consensus.BIP66Height = 0;        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks        consensus.nPowTargetSpacing = 10 * 60;        consensus.fPowAllowMinDifficultyBlocks = false;        consensus.fPowNoRetargeting = false;            consensus.nMinerConfirmationWindow = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;        consensus.nRuleChangeActivationThreshold = std::ceil(consensus.nMinerConfirmationWindow * 0.95); // 95% of nMinerConfirmationWindow     0        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008        // Deployment of BIP68, BIP112, and BIP113.        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 0;        // Deployment of SegWit (BIP141, BIP143, and BIP147)        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 0;        // The best chain should have at least this much work.        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000000000000001\");        // By default assume that the signatures in ancestors of this block are valid.        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\"); //453354        /**         * The message start string is designed to be unlikely to occur in normal data.         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce         * a large 32-bit integer with any alignment.         */        pchMessageStart[0] = 0xf8;        pchMessageStart[1] = 0xbd;        pchMessageStart[2] = 0xbe;        pchMessageStart[3] = 0xd8;        nDefaultPort = 22718;        nPruneAfterHeight = 100000;        genesis = CreateGenesisBlock(GENESIS_TIME, 2314582475, GENESIS_DIFFICULTY, 1, 50 * COIN);        //MineGenesisBlock(genesis);        consensus.hashGenesisBlock = genesis.GetHash();        assert(consensus.hashGenesisBlock == uint256S(\"0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddea\"));        assert(genesis.hashMerkleRoot == uint256S(\"0x5a5fbc104e0a21be0a745d014a87340408ef288cc4ca6ab21fa0d7565e4f6a76\"));        // Note that of those with the service bits flag, most only support a subset of possible options        vSeeds.push_back(CDNSSeedData(\"...\"));        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,55);        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));        fMiningRequiresPeers = true;        fDefaultConsistencyChecks = false;        fRequireStandard = true;        fMineBlocksOnDemand = false;        checkpointData = (CCheckpointData) {            boost::assign::map_list_of            ( 0, uint256S(\"0x\"))        };        chainTxData = ChainTxData{        };    }};That works fine in 0.14. In 0.25, I get:bitcoind bitcoind: kernel/chainparams.cpp:128: CMainParams::CMainParams(): Assertion `consensus.hashGenesisBlock == uint256S(\"0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddea\")' failed. Aborted (core dumped)Here is the code in 0.25 modified from the forked 0.14 code that I can't figure out. Tried setting txNew.nVersion to \"2\" and using the old CBlock CreateGenesisBlock() from 0.14 in 0.25 but no luck, same error. Highlighted in bold is where I think the problem is.#define GENESIS_TIME 1510225282#define GENESIS_DIFFICULTY 0x1e7fffffstatic CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward){    CMutableTransaction txNew;    txNew.nVersion = 1;    txNew.vin.resize(1);    txNew.vout.resize(1);    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));    txNew.vout[0].nValue = genesisReward;    txNew.vout[0].scriptPubKey = genesisOutputScript;    CBlock genesis;    genesis.nTime    = nTime;    genesis.nBits    = nBits;    genesis.nNonce   = nNonce;    genesis.nVersion = nVersion;    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));    genesis.hashPrevBlock.SetNull();    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);    return genesis;}static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward){    const char* pszTimestamp = \"New York Times 8/Sep/2017 Equifax Says Cyberattack May Have Affected 143 Million Customers\";    const CScript genesisOutputScript = CScript() << ParseHex(\"03facfdfc22816528518884608350d828e1403dd142d2276303b5b6da7a8b854a1\") << OP_CHECKSIG;    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);}/** * Main network on which people trade goods and services. */class CMainParams : public CChainParams {public:    CMainParams() {        strNetworkID = CBaseChainParams::MAIN;        consensus.signet_blocks = false;        consensus.signet_challenge.clear();        consensus.nSubsidyHalvingInterval = 210000;        consensus.script_flag_exceptions.emplace( // BIP16 exception            uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\"), SCRIPT_VERIFY_NONE);        consensus.script_flag_exceptions.emplace( // Taproot exception            uint256S(\"0x0000000000000000000f14c35b2d841e986ab5441de8c585d5ffe55ea1e395ad\"), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS);        consensus.BIP34Height = 512;        consensus.BIP34Hash = uint256S(\"0000000000000000000000000000000000000000000000000000000000000000\");        consensus.BIP65Height = 0;        consensus.BIP66Height = 0;        consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5        consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893        consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks        consensus.nPowTargetSpacing = 10 * 60;        consensus.fPowAllowMinDifficultyBlocks = false;        consensus.fPowNoRetargeting = false;        consensus.nRuleChangeActivationThreshold = 1815; // 90% of 2016        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay        // Deployment of Taproot (BIPs 340-342)        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1619222400; // April 24th, 2021        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000000000000001\");        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\");        pchMessageStart[0] = 0xf8;        pchMessageStart[1] = 0xbd;        pchMessageStart[2] = 0xbe;        pchMessageStart[3] = 0xd8;        nDefaultPort = 22718;        nPruneAfterHeight = 100000;        m_assumed_blockchain_size = 540;        m_assumed_chain_state_size = 7;        genesis = CreateGenesisBlock(GENESIS_TIME, 2314582475, GENESIS_DIFFICULTY, 1, 50 * COIN);        consensus.hashGenesisBlock = genesis.GetHash();        assert(consensus.hashGenesisBlock == uint256S(\"0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddea\"));        assert(genesis.hashMerkleRoot == uint256S(\"0x5a5fbc104e0a21be0a745d014a87340408ef288cc4ca6ab21fa0d7565e4f6a76\"));        vSeeds.emplace_back(\"...\");        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};        bech32_hrp = \"bc\";        vFixedSeeds = std::vector<uint8_t>(std::begin(chainparams_seed_main), std::end(chainparams_seed_main));        fDefaultConsistencyChecks = false;        fRequireStandard = true;        m_is_test_chain = false;        m_is_mockable_chain = false;        checkpointData = {            {                { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},                { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},                { 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},                {105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},                {134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},                {168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},                {193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},                {210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},                {216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},                {225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},                {250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},                {279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")},                {295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")},            }        };        m_assumeutxo_data = MapAssumeutxo{         // TODO to be specified in a future patch.        };        chainTxData = ChainTxData{            // Data from RPC: getchaintxstats 4096 000000000000000000035c3f0d31e71a5ee24c5aaf3354689f65bd7b07dee632            .nTime    = 1680665245,            .nTxCount = 820876044,            .dTxRate  = 3.672283614033389,        };    }};",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5467973",
  "comments": [
    {
      "author": "jakej1978@gmail.com",
      "created_time": "September 25, 2023, 05:27:16 PM",
      "body": "Quote from: ETFbitcoin on September 25, 2023, 10:57:27 AMSince the problem directly related with source code, i'd advice to ask on https://github.com/bitcoin/bitcoin or Bitcoin IRC (not sure which channel suitable though) where far more Bitcoin Core developer/contributor visit there. Although based on 2 block hash you mentioned, it looks like belong to altcoin called PlusOneCoin[1] which makes some people don't bother to help.[1] https://github.com/plusonecoin/plusonecoin/blob/master/src/chainparams.cppThanks for the response. Yes, you are correct. There were only a few changes (the keys/hash) in chainparams.cpp to upgrade. Moving them over to 0.25, regardless of anything I  do,  blows up with a genesis hash key failure against the one ending in *dea. It would be simple if starting a genesis hash from the get go, but I'm stuck with the original keys/hash, pszTimestamp... Ho humPlus1 github isn't going to respond, lol. It's interesting to me. I've spent two days and $50 beating up ChatGPT and claude.ai to no avail. I think it must be something to do with timing or an upgrade in byte code. I've tried setting txNew.nVersion to match, and copying a lot of the old code into the new kernel/src/chainparams.cpp (it changed from src/chainparams.cpp), which throws the same assert failure.I thought I'd ask and hope for the best. I learned a lot from going through the code, but I'm your average or below average novice programmer. This one is beyond my skill level.Any suggestions are welcome and appreciated.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jakej1978@gmail.com",
      "created_time": "September 26, 2023, 06:23:13 PM",
      "body": "Quote from: ETFbitcoin on September 26, 2023, 09:50:30 AMQuote from: jakej1978@gmail.com on September 25, 2023, 05:27:16 PMI've spent two days and $50 beating up ChatGPT and claude.ai to no avail. I think it must be something to do with timing or an upgrade in byte code. I've tried setting txNew.nVersion to match, and copying a lot of the old code into the new kernel/src/chainparams.cpp (it changed from src/chainparams.cpp), which throws the same assert failure.I only have little programming skill, but it's known AI (such as ChatGPT) is far more likely to fail at very specific task. And i expect it won't be easy to find bug or error on code generated by AI, unless you're experienced programmer. I expect trying different AI won't lead to significantly better result/experience.It was able to help me with some things, while other times it said \"As an AI ... I can't modify or write code for you, but I can give you this example...\" If I phrase it differently, my luck improved and I was able to get partial, or full code returns, and it even created some patches to help me update or get some broken code to work.But, as you said, it is in its infancy and is often incorrect and failed. So, it is kind of hit or miss. Then, you hit a token limit and have to wait 48 hours to ask it again.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "NotATether",
      "created_time": "September 27, 2023, 09:23:39 AM",
      "body": "You need to search for the lines of code that have the old genesis block hash in it so you can find the line that contains the assertion, since G++ is not printing the line number for it I don't think.Open a Unix shell at the root source folder and run this command (MinGW or Git for Windows shell also works):Code:find . -name '*' -exec grep -Hn 0x00001ef7e03e773817a36c267d6f431412a3678dec49b4171f86ce419abcddea {} \\;(I'm pretty sure there's a shorter way to write this but I keep forgetting it. Maybe try ripgrep.)",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}
{
  "id": "topic_5413028",
  "title": "Initscri",
  "author": "Initscri",
  "created_time": "September 10, 2022, 03:24:42 AM",
  "content": "I know this is BitcoinTalk, but I know there's quite a few developers (potentially web developers) on this forum. After working with React / Ember professionally for the last 7 years, I started to recall the days of vanilla JS. The old approaches to developing websites without massive frameworks/guidelines. Using python/PHP for templating and jQuery or Vanilla JS for simple functionality. Granted, this had a downside: a simple Github search by browser will give you PTSD like no tomorrow with all of the \"bugs\" associated to certain browsers.We all had our approaches, but seemingly after working with frameworks, I'm starting to miss the simplicity of a single javascript file per page, loading in functionality where I needed it, and not this over-arching dependency on frontend frameworks.Then you have the employment culture where companies mandate you use a framework for something as simple as a landing page w/ newsletter entry because they heard of this magical framework called \"React\"I know I'm not alone: https://medium.com/codex/youre-missing-out-on-vanilla-js-91aceec917d6Figured I'd ask: am I insane, or for the web developers here on the forum, is this something you miss too.",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5413028",
  "comments": [
    {
      "author": "NotATether",
      "created_time": "September 10, 2022, 04:15:53 AM",
      "body": "I guess for people who have been developing through the 2000s when books on that topic were being widely published (\"Understanding ECMAScript\" by Nicholas C. Zakas immediately comes to mind) does make you lament that nobody uses the old frameworks anymore, but to put it honestly - these new frameworks make it easier to create a website that looks like an app.It's a pretty important innovation as we move towards cross-platform apps and data interchange.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "serhack",
      "created_time": "September 10, 2022, 08:51:15 AM",
      "body": "It mainly depends on what you need to develop. For blog, static websites and most of landing websites, I guess you can go with vanilla JS (instead of that heavy Jquery library). I recently visited a landing website that downloaded 10 MB of JS only to show a typewriting animation.But you should also need to comprehend why we moved to JS framework. One of the most helpful pattern in software engineering is the reusing method. Framework such as React, Angular or Vue really help developers to build an acceptable UX without too much efforts (reducing the development costs). The vanilla JS can not be used for building an entire application based on javascript for many reasons. The first is that you can not re-use components from other projects: when it was created, there wasn't the concept of \"dependencies\". Someone tends to compare vanilla JS and modern frameworks with the comparison between C and C++. C was great, you could manage the raw pointers with the lowest overhead possible, but you can do errors and re-using components is difficult. From the other side, we have C++ which allows you to manage your code better and not to worry about pointers, objects and much more. So, the final reason for choosing one or the other is the balance between development speed and product speed. Let's make a given example. For sure, a vanilla-based JS is easier to load for browsers, but if you're going to build UI good luck. On the other head, JS frameworks allow you to make a dashboard in a few hours, but browsers will spend a lot of time downloading the components and manipulating the DOM for you.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "PowerGlove",
      "created_time": "September 23, 2022, 11:16:33 AM",
      "body": "Yep. I feel you, OP.My experience leans a little more towards systems programming than web development, but I miss the old days, too.I find it really alarming how few programmers are able to work without the help of frameworks and libraries. To my way of thinking, that's like being a chef that's unable to prepare a meal without using store-bought sauces.I appreciate the productivity argument, and it is pragmatic to leverage the work of others to get your own work done in a timely manner, but I suspect that most modern programmers simply can't work any other way.In my opinion, one of the most damaging mistakes (in terms of growth) that a young programmer can make, is to buy into the whole \"Don't reinvent the wheel\" thing. Taking that idea to heart can seriously stunt your development as a coder. It's good to roll your own stuff. Even if you end up not using it, you'll have learned so much more by trying to solve the problem for yourself instead of always reaching for code that you didn't write.I get that not every programmer wants to (or can) be really good at what they do, but it makes me a little sad that so many programmers these days seem to be satisfied with throwing applications together without understanding the building blocks they're using.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}
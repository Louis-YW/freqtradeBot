{
  "id": "topic_5403066",
  "title": "supermankid",
  "author": "supermankid",
  "created_time": "June 18, 2022, 08:05:14 AM",
  "content": "A while ago, I asked a question related to the possible amount of solutions for the current difficulty limit (19 0s as first part of blocks hash). (in one of the answer) I was told that the current method does not use the method that matches the exact number of zeros but rather \"The actual problem is to find a hash (treated as a number) that is less than or equal to the target value.\"Now after a bit of rethinking and calculations, I have come to the following conclusion that the following statements are correct.1) Bitcoin still counts the number of zeros.2) The problem is to find the has that is less than or equal to target value3) Statement 1) and 2) are actually the same 1. For example(for simplicity, lets assume the blocks has is just one hex -SHA-1 system.so. block + block + timestamps + nonce =>hash =>  [0-f]hex => [0000-1111]binarylets say required 0 is 1 => possible solutions are => (0000,0001,0010,0011,0100,0101,0110,0111) first zero is fixed and the permutation of the remaining 3 places on binary => 2^3 => 8So, Bitcoin still counts the number of zeros. 2. Now to calculate this using the number less than method. (still requires 1 zero on the 1st position of hash)=> required hash must be less than or equal to 0111 so, (0,1,2,3,4,5,6,7) in hex => total solutions => 8now translate that into modern day situation on 6 June 2022. => Blocks solution=> 000000000000000000019a43a23165642477bc987310552d0a2c5fb9e7d288dcUsing Method 1.Number of required 0s => 19=>  0000000000000000000  Places that can be changed to match the solution=> 19a43a23165642477bc987310552d0a2c5fb9e7d288dcIn binary places that can be matched => (64-19)*4=> 180 Possible solution => Permutation of 180 binary position => 2^180 => 1.53 × 10^54 (decimal)Using Method 2.Number of required 0s => 19=>  0000000000000000000  The solution should be thus less than or equal to 0000000000000000000ffffffff(64-19fs) => 19 time 0 + 45 times fThe maximum number is the number of (zeros+fffffff...........)Possible solution => 45 times f => fffffffffffffffffffffffffffffffffffffffffffff_16 => 1.53 × 10^54 (decimal)(This number or less than this will solve the block)So, @odolvlobo, I still stand by the statement that it is counting the number of zeros is valid. It is just an another way of looking at it. Both are essentially same methods. Only different way of perceiving the techniques.[Note: I also understand that second method is implemented in software for calculation but in principle, it is solving the method 1 or method 2 whichever way we look at it. Isn't  that so?]",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5403066",
  "comments": [
    {
      "author": "o_e_l_e_o",
      "created_time": "June 18, 2022, 01:35:35 PMLast edit: June 19, 2022, 04:54:49 AM by o_e_l_e_o",
      "body": "Quote from: supermankid on June 18, 2022, 08:05:14 AM1) Bitcoin still counts the number of zeros.2) The problem is to find the has that is less than or equal to target value3) Statement 1) and 2) are actually the sameThey are not the same.Let's say the target is 0100.I find a block with hash 0101.My block hash is higher than the target, but has the same number of zeroes.If you are looking for a number which is less than or equal to that target, my block is invalid.If you are counting the zeroes, my block is valid.Quote from: supermankid on June 18, 2022, 08:05:14 AMUsing Method 1.Using Method 2.Your two methods just perform the same calculation in different ways. Both count the zeroes first and then remove the zeroes from the 64 hex characters, and then use the remaining 45 characters to work out the number of possibilities.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "supermankid",
      "created_time": "June 18, 2022, 05:37:23 PM",
      "body": "I see. Things are clear now. Thanks.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}
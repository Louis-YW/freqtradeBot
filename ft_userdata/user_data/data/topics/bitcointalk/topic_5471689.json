{
  "id": "topic_5471689",
  "title": "jonbet",
  "author": "jonbet",
  "created_time": "October 26, 2023, 02:26:40 AM",
  "content": "Welcome! In preparation for the upcoming launch of our original game Crash, we're performing this seeding event to ensure fairness and immutable rolls. For this seeding event we are following a similar approach as Stake.com.  As part of our fairness we generated a chain of 10,000,000 SHA256 hashes where each hash is the hash of the hexadecimal representation of the previous hash. Being the last hash in the chain: 4c17cadb418fd89af62e4ea8427fc04a97b8fcdac9ba41e23fd7047339aca70bScript to calculate Crash point:Code:const { createHmac } = require('crypto');const divisible = (hash, mod) => {  // So ABCDEFGHIJ should be chunked like  AB CDEF GHIJ  let val = 0;  let o = hash.length % 4;  for (let i = o > 0 ? o - 4 : 0; i < hash.length; i += 4) {    val = ((val << 16) + parseInt(hash.substring(i, i+4), 16)) % mod;  }  return val === 0;};const calculateCrashPointFromHash = function(hash) {  // In 1 of 15 games the game crashes instantly.  if (divisible(hash, 15))    return 0;  // Use the most significant 52-bit from the hash to calculate the crash point  let h = parseInt(hash.slice(0,52/4),16);  let e = Math.pow(2,52);  return (Math.floor((100 * e - h) / (e - h)) / 100).toFixed(2);}// these will be the 10M pre generated rolls to be usedconst hashChain = [];const gameHash = hashChain.pop();// It's the hash we're gonna be using of the result of a yet to be mined block on the blockchain #813,847const blockHash = '';const hash = createHmac('sha256', gameHash).update(blockHash).digest('hex');const crashPoint = calculateCrashPointFromHash(hash);console.log({ crashPoint });We’re gonna be using a BlockHash that hasn’t been mined at the time of this post, we’re expecting to use Bitcoin block 813,847, this to prove we have no influence over the outcome of the game. Please guys feel free to quote this post so this will be all set in stone.Looking forward to show you guys Crash very soon!",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5471689",
  "comments": [
    {
      "author": "jonbet",
      "created_time": "October 26, 2023, 02:33:04 AM",
      "body": "Archived post: https://archive.ph/cbBcnClient seed has been mined!0000000000000000000283a5702709c495051981f70595ff60b3366a8d77dc01https://www.blockchain.com/explorer/blocks/btc/813847",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "October 30, 2023, 06:19:48 PM",
      "body": "We'll also be releasing our original game Slide following the same approach as our previous posts, crash and double. As part of our fairness we generated a chain of 10,000,000 SHA256 hashes where each hash is the hash of the hexadecimal representation of the previous hash. Being the last hash in the chain: 5ac52cfcc9687f26d28caa2d9b7fd9d54b2c9c5f1ec328ff09475eb1838b0b0fScript to calculate Slide point:Code:const { createHmac } = require('crypto');const divisible = (hash, mod) => {  // So ABCDEFGHIJ should be chunked like  AB CDEF GHIJ  let val = 0;  let o = hash.length % 4;  for (let i = o > 0 ? o - 4 : 0; i < hash.length; i += 4) {    val = ((val << 16) + parseInt(hash.substring(i, i + 4), 16)) % mod;  }  return val === 0;};const calculateSlidePointFromHash = function (hash) {  // In 1 of 15 games the game slides instantly.  if (divisible(hash, 15)) return 0;  // Use the most significant 52-bit from the hash to calculate the slide point  let h = parseInt(hash.slice(0, 52 / 4), 16);  let e = Math.pow(2, 52);  return (Math.floor((100 * e - h) / (e - h)) / 100).toFixed(2);};// these will be the 10M pre generated rolls to be usedconst hashChain = [];const gameHash = hashChain.pop();// It's the hash we're gonna be using of the result of a yet to be mined block on the blockchain #814,558const blockHash = '';const hash = createHmac('sha256', gameHash).update(blockHash).digest('hex');const slidePoint = calculateSlidePointFromHash(hash);console.log({ slidePoint });We’re gonna be using a BlockHash that hasn’t been mined at the time of this post, we’re expecting to use Bitcoin block 814558, this to prove we have no influence over the outcome of the game. Please guys feel free to quote this post so this will be all set in stone.Looking forward to show you guys Slide very soon!",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "October 30, 2023, 06:54:52 PM",
      "body": "https://archive.ph/H2ceo#selection-1571.42-1571.47Client seed for Slide has been mined!0000000000000000000282c24c48319da876cf4fbdcd427376a51a70d4bd020fhttps://www.blockchain.com/explorer/blocks/btc/814558",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "January 08, 2024, 05:04:32 AM",
      "body": "Hello all! We're back again prepping another game before our launch. The game for this seeding event will be our original game Crash II.As usual, we've generated a new chain of 10,000,000 SHA256 hashes where each hash is the hash of the hexadecimal representation of the previous hash. Being the last hash in the chain: a47ae20974d246da47fa1d54c231002de5d08fe72c4a120e9809c3ff02fee837Code:const { createHmac } = require('crypto');const divisible = (hash, mod) => {  // So ABCDEFGHIJ should be chunked like  AB CDEF GHIJ  let val = 0;  let o = hash.length % 4;  for (let i = o > 0 ? o - 4 : 0; i < hash.length; i += 4) {    val = ((val << 16) + parseInt(hash.substring(i, i + 4), 16)) % mod;  }  return val === 0;};const calculateIfIsBonusRound = (provablyFairHash) => {  return divisible(provablyFairHash, 72);};const calculateCrashPointFromHash = function (hash) {  // In 1 of 15 games the game crashes instantly.  if (divisible(hash, 15)) return 0;  // Use the most significant 52-bit from the hash to calculate the crash point  let h = parseInt(hash.slice(0, 52 / 4), 16);  let e = Math.pow(2, 52);  return (Math.floor((100 * e - h) / (e - h)) / 100).toFixed(2);};// these will be the 10M pre generated rolls to be usedconst hashChain = ['random1', 'random2'];const gameHash = hashChain.pop();const blockHash = '';const hash = createHmac('sha256', gameHash).update(blockHash).digest('hex');const crashPoint = calculateCrashPointFromHash(hash);// if it's bonus round you get double payoutconst isBonusRound = calculateIfIsBonusRound(hash);console.log({ crashPoint, isBonusRound });We’re gonna be using a BlockHash that hasn’t been mined at the time of this post, we’re expecting to use Bitcoin block 824,821 this to prove we have no influence over the outcome of the game. Please guys feel free to quote this post so this will be all set in stone.Looking forward to show you guys Crash II very soon!",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "January 08, 2024, 05:45:37 AM",
      "body": "https://archive.ph/cqk4F#selection-1863.127-1863.135Client seed for Crash II has been mined!000000000000000000015399285347bdd20f4bde955a58d08e3b24c480a2b09bhttps://www.blockchain.com/explorer/blocks/btc/824821",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "January 08, 2024, 06:46:12 AM",
      "body": "The game for this seeding event will be our original game Fortune Double.As usual, we've generated a new chain of 10,000,000 SHA256 hashes where each hash is the hash of the hexadecimal representation of the previous hash. Being the last hash in the chain: 2cdcfd73de78db2eac8eb282ce819d756525fcd06a34ce858b1ffa8f74cbb9ecCode:const ROULETTE_TILES = [  { number: 0, color: 'white' },  { number: 11, color: 'black' },  { number: 5, color: 'red' },  { number: 10, color: 'black' },  { number: 6, color: 'red' },  { number: 9, color: 'black' },  { number: 7, color: 'red' },  { number: 8, color: 'black' },  { number: 1, color: 'red' },  { number: 14, color: 'black' },  { number: 2, color: 'red' },  { number: 13, color: 'black' },  { number: 3, color: 'red' },  { number: 12, color: 'black' },  { number: 4, color: 'red' },];module.exports.getColorByRoll = (roll) => {  return ROULETTE_TILES.find((t) => t.number === roll).color;};const getWhiteMultiplierFromHash = (hash) => {  let h = parseInt(hash.slice(0, -52 / 4), 16);  let e = Math.pow(2, 52);  let multiplier = Math.floor((100 * e - h) / (e - h)) / 100 + 7.5;  multiplier = Math.max(8.5, Math.min(multiplier, 250));  return +multiplier.toFixed(2);};module.exports.getRollFromHash = (hash) => {  const integ = parseInt(hash, 16);  const MAX_RANGE = Math.pow(2, 256);  const randval = integ / MAX_RANGE;  const n = Math.floor(randval * 15);  const tile = ROULETTE_TILES.find((t) => t.number === n);  let color, multiplier;  switch (tile.color) {    case 'white':      color = 0;      multiplier = getWhiteMultiplierFromHash(hash);      break;    case 'black':      color = 2;      multiplier = 2;      break;    case 'red':      color = 1;      multiplier = 2;      break;  }  return {    n: n,    multiplier: multiplier,    color: color,  };};We’re gonna be using a BlockHash that hasn’t been mined at the time of this post, we’re expecting to use Bitcoin block 824,826 this to prove we have no influence over the outcome of the game. Please guys feel free to quote this post so this will be all set in stone.Looking forward to show you guys Fortune Double very soon!",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "jonbet",
      "created_time": "January 08, 2024, 06:58:24 AM",
      "body": "https://archive.ph/k91Vx#selection-2383.57-2383.72Client seed for Fortune Double has been mined!00000000000000000003a3a271533a06a146ae3556aa14240a378ee7d7654eebhttps://www.blockchain.com/explorer/blocks/btc/824826",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "AB de Royse777",
      "created_time": "January 08, 2024, 05:00:05 PM",
      "body": "May I know your website url?",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}
{
  "id": "topic_5471007",
  "title": "NotATether",
  "author": "NotATether",
  "created_time": "October 20, 2023, 06:00:27 AM",
  "content": "Guys, I have some C++ elliptic curve code that does things like point addition/subtraction and other stuff like that. The workload I'm running involves generating some public keys and saving them on the hard disk, in batches so as to not overwhelm the memory, but my friend told me it's too slow on CPU.I think the performance will improve massively if I can get the elliptic curve codes converted to CUDA or OpenCL or something like that, but I'm having trouble finding a suitable library that won't force a full rewrite (and this is no help). Alternatively if there is already a 256-bit secp256k1 toolbox somewhere on the internet, that would be fine also.",
  "score": 0,
  "upvotes": 0,
  "downvotes": 0,
  "url": "https://bitcointalk.org/index.php?topic=5471007",
  "comments": [
    {
      "author": "garlonicon",
      "created_time": "October 20, 2023, 07:47:52 AM",
      "body": "QuoteAlternatively if there is already a 256-bit secp256k1 toolbox somewhere on the internet, that would be fine also.What about the code that is included into Bitcoin Core? https://github.com/bitcoin/bitcoin/tree/master/src/secp256k1",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    },
    {
      "author": "NotATether",
      "created_time": "October 22, 2023, 03:10:16 PM",
      "body": "Quote from: garlonicon on October 20, 2023, 07:47:52 AMQuoteAlternatively if there is already a 256-bit secp256k1 toolbox somewhere on the internet, that would be fine also.What about the code that is included into Bitcoin Core? https://github.com/bitcoin/bitcoin/tree/master/src/secp256k1Somehow, the last time I made an implementation using libsecp256k1, I was getting incorrect keys. But maybe that was because I could've been using it wrong or something.",
      "score": 0,
      "upvotes": 0,
      "downvotes": 0
    }
  ]
}